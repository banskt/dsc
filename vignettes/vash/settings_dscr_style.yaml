scenario:
    level: 1
    exe: datamaker.R
    seed: R(1:50), R(1:5)
    params:
        path: R(gsub("[[:space:]]", "", readChar($(fileName), file.info($(fileName))$size)))
        tissue: Adipose-Subcutaneous, R(c("Adipose-Subcutaneous","Lung"))
        Nsamp: 2, 10, 50
        Ngene: 10000
        voom.normalize: TRUE
        breaksample: FALSE, TRUE
        nullpi: 0.9
        poisthin: TRUE
        __alias__: RList(args)
        __logic__: (seed[1] * path * tissue * Nsamp * Ngene * voom.normalize * breaksample),
                   (seed[2] * path * tissue[2] * Nsamp * Ngene * voom.normalize * breaksample[2] * nullpi),
                   (seed[2] * path * tissue[1] * Nsamp * Ngene * voom.normalize * breaksample[1] * poisthin)
    return: data

method:
    level: 2
    exe: deseq2.wrapper.R, edger.wrapper.R, limma.wrapper.R, ash.wrapper.R, jointash.wrapper.R
    params:
        input: $1
        transform: voom, RUVvoom, SVAvoom, quasibinom, RUV+quasibinom, SVA+quasibinom, Myrna+quasibinom, edgeRglm
        __alias__: RList(args, transform)
        exe[1]:
            __logic__: NULL
        exe[2]:
            exacttest: TRUE, FALSE
            RUV: FALSE, FALSE, TRUE
            SVA: FALSE, TRUE, FALSE
            __alias__: RList(args)
            __logic__: exacttest[1], (exacttest[2] * (RUV + SVA))
        exe[3]:
            robust: FALSE, TRUE
            __alias__: RList(args)
            __logic__: (transform[1] * robust), (transform[2,3] * robust[1])
        exe[4]:
            __logic__: transform[1:6]
        exe[5]:
            singlecomp: TRUE
            __alias__: RList(args)
    return: output

score:
    exe: score.R
    params:
        data: $1
        output: $2
    return: result

DSC:
    run: scenario * method * score
    runtime:
        R_libs: github/stephens999/ashr, bioc/DESeq2, bioc/qvalue/3.2, mixash, github/mengyin/vash, limma,
                edgeR, RUVSeq, sva, data.table, DESeq
        exe_path: bin
        output: vash
        variables:
            fileName: data_path.txt
