configfile: "config.yaml"
import glob
from collections import OrderedDict
from subprocess import check_output

def get_docs():
    res = []
    for item in ['design', 'course', 'setup', 'interface', 'vignettes']:
        files = list(glob.glob('{}-*'.format(item)))
        files.sort(key = lambda x: x.split("-")[1])
        res.extend(files)
    return res

def get_filename(string):
    return string.replace(':', '').replace(' ', '-')

rule home:
  input: 'home.notes', 'footer.notes', 'issues.notes'
  output: touch("home.done")
  shell: '''
  {config[md]} {input[0]} -o {config[dir]}/Home.md;
  {config[md]} {input[1]} -o {config[dir]}/_Footer.md;
  {config[md]} {input[2]} -o {config[dir]}/-;
  '''

rule docs:
  input: get_docs()
  output: touch("docs.done")
  run:
    for item in input:
        wiki_path = os.path.join(config['dir'], item.split('-')[0])
        shell('{cmd} {input} -o {output}/-'.format(cmd = config['md'],
                                                   input = item,
                                                   output = wiki_path))
rule sidebar:
  input: get_docs()
  output: touch("sidebar.done")
  run:
    TITLES = OrderedDict([
        ('design', 'Design & Syntax'),
        ('course', 'Short Course'),
        ('interface', 'Command Interface'),
        ('setup', 'Setup Guide'),
        ('vignettes', 'Examples')
        ])
    res = {}
    for item in input:
        # Global navigator
        section = item.split('-')[0]
        sidebar = '{}/{}/_Sidebar.md'.format(config['dir'], section)
        if section not in res:
            res[section] = []
            shell('echo -e "**[Wiki Home](https://github.com/stephenslab/dsc2/wiki)**\n" > {}'.format(sidebar))
        shell('{cmd} {input} -o .tmp.md'.format(cmd = config['md'],
                                                 input = item))
        with open('.tmp.md') as f:
            try:
                title = f.readlines()[0].replace('#', '').strip()
            except IndexError:
                print(item)
                raise
        filename = get_filename(title)
        res[section].append('* [[{}|{}]]'.format(title, filename))
        # local TOC
        filepath = '{}/{}/{}.md'.format(config['dir'], section, filename)
        local_res = []
        cmd = 'python markdown_toclify.py {} --github'.format(filepath)
        for line in check_output(cmd, shell = True).decode('utf8').strip().split('\n'):
            line = line.rstrip()
            if not line:
                break
            if line == '# Table of Contents':
                line = '**{}**'.format(title)
            line = line.replace('#', filename + '#')
            local_res.append(line)
        if len(local_res) > 1:
            with open(sidebar, 'a') as f:
                for line in local_res:
                    f.write(line + '\n')
                f.write('\n')
    with open(config['dir'] + '/_Sidebar.md', 'w') as f:
        for key in TITLES.keys():
            if key in res:
                f.write('\n**' + TITLES[key] + '**\n\n')
                for item in res[key]:
                    f.write(item + '\n')

rule all:
  input: "home.done", "docs.done", "sidebar.done"

rule clean:
  shell: "rm -f *.done"
