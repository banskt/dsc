###
#! Update existing DSC
###
# The [Quick Start|@Quick-Start@] example contains 3 DSC blocks, @@simulate@@, @@estimate@@ and @@mse@@. Suppose we now have a new computational routine for location estimate via the "Winsorized" mean. The routine is implemented as @@winsor.R@@:
#{r
mean = psych::winsor.mean(x, trim = trim, na.rm = TRUE)
#}
# There are two ways to incorporate this new computational routine into DSC: either by adding it to the existing @@estimate@@ block, or by adding a new block. For @@winsor.R@@ there is an additional parameter @@trim@@ which does not exist in @@estimate@@. We will show here two flavors to update, both involving minimal changes to the DSC file and result in the same outcome. In practice one should always try to adopt a flavor that is most logically clear and succinct.
#! Add steps to existing block
# We change the @@estimate@@ block to the following:
#{out yaml
output:///cat ../vignettes/one_sample_location/settings_add_method_v1.yaml 9 15
#}
# Note that we appended the new executable @@winsor.R@@ to the `exe` entry, along with an executable specific parameter specification in the @@params@@ section to assign two possible values to @@trim@@ which essentially provides two versions of Winsorization for comparison.
dsc execute settings_add_method_v1.yaml -j8

#! Add a new block
# We keep the `estimate` block the same but we add a new block `estimate_winsor`, and modify the ""run"" sequence in the DSC section to use this new block:
#{out yaml
output:///cat ../vignettes/one_sample_location/settings_add_method_v2.yaml
#}
# In the ""run"" sequence, the previous `estimate` and the new `estimate_winsor` blocks will be executed in parallel to each other, both taking input from `simulate` block and generating output for `mse` block.
