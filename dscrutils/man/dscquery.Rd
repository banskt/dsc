% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dscquery.R
\name{dscquery}
\alias{dscquery}
\title{R interface for querying DSC output.}
\usage{
dscquery(dsc.outdir, targets, targets.notreq = NULL, conditions = NULL,
  groups = NULL, ignore.missing.file = FALSE,
  omit.file.columns = FALSE, exec = "dsc-query",
  return.type = c("data.frame", "list"), verbose = TRUE)
}
\arguments{
\item{dsc.outdir}{Directory where the DSC output is stored.}

\item{targets}{Query targets specified as a character string
separated by spaces, or by a character vector; for example,
\code{targets = "simulate.n analyze score.error"} and \code{targets
= c("simulate.n","analyze","score.error")} are equivalent. DSC
pipelines (i.e., rows of the returned data frame) in which any of
the targets are unassigned or missing (\code{NA}) will be
automatically removed from the data frame; to allow for unassigned
or missing values in the output columns (or list elements), use
argument \code{targets.notreq} instead. This input argument,
together with \code{targets.notreq}, specifies the \code{--target}
flag in the \code{dsc-query} call. At least one of \code{targets}
and \code{targets.notreq} must not be \code{NULL} or empty. Note
that, to easily specify multiple targets from the same module, we
recommend using \code{\link{paste}}; e.g., \code{paste("simulate",
c("n","p","df"),sep = ".")}. These targets will be the names of the
columns in the data frame if a data frame is returned, or the names
of the list elements if a list is returned.}

\item{targets.notreq}{Non-required query targets; this is the same
as \code{targets}, except that unassigned or missing values are not
removed from the return value. This input argument, together with
\code{targets}, specifies the \code{--target} flag in the
\code{dsc-query} call. At least one of \code{targets} and
\code{targets.notreq} must not be \code{NULL} or empty.}

\item{conditions}{Conditions used to filter DSC pipeline
results. When \code{conditions = NULL}, no additional filtering of
DSC pipelines is performed. Although results can always be filtered
\emph{post hoc}, using \code{conditions} to filter can
significantly speed up queries when the DSC outputs are very large,
as this will filter results, whenever possible, \emph{before} they
are loaded into R. Query conditions are specified as R expressions,
in which target names are written as \code{$(...)}; for example, to
request only results in which the value of parameter \code{sigma}
in module \code{simulate} is greater than or equal to \code{0.1},
set \code{conditions = "$(simulate.sigma) >= 0.1"} (see below for
additional examples). This input argument specifies the
\code{--condition} flag in the call to \code{dsc-query}.}

\item{groups}{Defines module groups. This argument specifies the
\code{--groups} flag in the call to \code{dsc-query}. For example,
\code{groups = c("method: mean median", "score: abs_err sqrt_err")}
will define two module groups, \code{method} and \code{score}.}

\item{ignore.missing.file}{If \code{ignore.missing.file = TRUE},
all DSC output files that are missing will have \code{NA} for the
file name; when extracting target outputs from files, any outputs
with missing files will have their value set to \code{NA}. If
\code{ignore.missing.file = FALSE}, \code{dscquery} will throw an
error whenever a missing file is encountered.}

\item{omit.file.columns}{If \code{omit.file.columns = TRUE}, all
columns or list elements specifying DSC output files will not be
included in the return value (these are list elements or column
names ending in "output.file").}

\item{exec}{The command or pathname of the \code{dsc-query}
executable.}

\item{return.type}{If \code{return.type = "data.frame"}, the DSC
outputs are returned in a data frame; if \code{return.type =
"list"}, the DSC outputs in a list. See "Value" for more
information about the different return types, and the benefits (and
limitations) of each.}

\item{verbose}{If \code{verbose = TRUE}, print progress of DSC
query command to the console.}
}
\value{
A list or data frame containing the result of the DSC
query.

When \code{return.type = "data.frame"}, the output is a
data frame.  When possible, DSC outputs are extracted into the
columns of the data frame; when this is not possible (e.g., for
more complex outputs such as matrices), file names containing the
DSC outputs are provided instead. In the latter case, individual
outputs can be retrieved using \code{\link{read_dsc}}.

When \code{return.type = "list"}, the output is a list, with list
elements corresponding to the query targets.

A data frame is most convenient with the outputs are not complex.

On the other hand, if many outputs are large or complex objects, it
may be better to output a list, which is a much more flexible data
structure. Note that a list can be later converted to a data frame
using \code{\link{as.data.frame}}, or converted to a "tibble" using
the \code{\link[tibble]{as_tibble}} function from the tibble
package, or converted to many other data structures.

When targets are unassigned, these are stored as missing values
(\code{NA}) in the appropriate columns.
}
\description{
This is an R interface to the \code{dsc-query} program
for conveniently extracting and exploring DSC results within the R
environment. For additional documentation, run
\code{system("dsc-query --help")}.
}
\note{
We have made considerable effort to prevent column names from
being duplicated. However, we have not tested this extensively for
possible column name conflicts.

This function may not work in Windows.
}
\examples{

# Retrieve the number of samples ("n") and error summary ("error")
# from all simulations in the "one_sample_location" DSC experiment.
dsc.dir <- system.file("datafiles","one_sample_location",
                       "dsc_result",package = "dscrutils")
dat1 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error")

# Retrieve the results only for simulations in which the "mean"
# module was run. Because this condition is about a module name, it
# is applied before loading the full set of results into R, so the
# filtering step can speed up the query when there are many
# simulation results.
dat2 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
                conditions = "$(analyze) == 'mean'")

# Return results only for simulations in which the error summary is
# greater than 0.25. This condition is applied after loading the full
# set of results into R, and so this sort of condition will not
# reduce the query runtime.
dat3 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
               conditions = "$(score.error) > 0.25")

# Retrieve the DSC results only for simulations in which the "mean"
# module was run, and which which the error summary is greater than
# 0.25. The conditions in this case are applied before and after
# loading results into R.
dat4 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
                 conditions = c("$(score.error) > 0.25",
                               "$(analyze) == 'median'"))

# Retrieve some results from the "ash" DSC experiment. In this
# example, the beta estimates are long vectors (length 1,000), so the
# results are not extracted into the outputted data frame.
dsc.dir2 <- system.file("datafiles","ash","dsc_result",
                        package = "dscrutils")
dat5 <-
  dscquery(dsc.dir2,
           targets = c(paste("simulate",c("nsamp","g"),sep="."),
                       paste("shrink",c("mixcompdist","beta_est","pi0_est"),
                             sep=".")),
           conditions = "$(simulate.g)=='list(c(2/3,1/3),c(0,0),c(1,2))'")

# This is the same as the previous example, but extracts the
# vector-valued beta estimates into the outputted data frame. As a
# result, the data frame of query results is much larger (it has over
# 1000 columns).
dat6 <-
  dscquery(dsc.dir2,
           targets = c("simulate.nsamp","simulate.g","shrink.mixcompdist",
                       "shrink.beta_est","shrink.pi0_est"),
           conditions = "$(simulate.g)=='list(c(2/3,1/3),c(0,0),c(1,2))'",
           max.extract.vector = 1000)

\dontrun{

# This query should generate an error because there is no output
# called "mse" in the "score" module.
dat7 <- dscquery(dsc.dir,targets = c("simulate.n","analyze","score.mse"),
                 conditions = "$(simulate.n) > 10")

}

}
