% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dscquery.R
\name{dscquery}
\alias{dscquery}
\title{R interface for querying DSC output.}
\usage{
dscquery(dsc.outdir, targets, others = NULL, conditions = NULL,
  groups = NULL, add.path = FALSE, ignore.missing.file = FALSE,
  omit.file.columns = FALSE, exec = "dsc-query",
  max.extract.vector = 10, verbose = TRUE)
}
\arguments{
\item{dsc.outdir}{Directory where DSC output is stored.}

\item{targets}{Query targets specified as
character string separated by space, or a character vector, e.g.,
\code{targets = "simulate.n analyze score.error"} and
\code{targets = c("simulate.n","analyze","score.error")} are equivalent.
Using \code{paste}, eg \code{paste("simulate",c("n","p","df"),sep=".")}
one can specify multiple properties from the same module.
These will be the names of the columns in the returned data frame.}

\item{others}{Additional query items similarly specified as
\code{targets}. Difference between \code{targets} and
\code{others} is that the rows whose \code{targets} columns
containing all missing values will be removed, while \code{others}
columns will not have this impact.}

\item{conditions}{The default \code{NULL} means "no conditions", in
which case the results for all DSC pipelines are returned.
Query conditions are specified as R expressions with target names in the
format \code{$(...)}.}

\item{groups}{Definition of module groups. For example,
\code{groups = c("method: mean median", "score: abs_err sqrt_err")}
will dynamically create module groups \code{method} and \code{score}
even if they have not previously been defined when running DSC.}

\item{add.path}{If TRUE, the returned file column in data frame
will contain full pathnames, not just the base filenames.}

\item{ignore.missing.file}{If TRUE will return NA for missing file
when extracting values from files.}

\item{omit.file.columns}{If TRUE will remove columns of filenames.
That is, columns ending with "output.file" colnames.}

\item{exec}{The command or pathname of the dsc-query executable.}

\item{max.extract.vector}{Vector-valued DSC outputs not exceeding
this length are automatically extracted to the data frame.}

\item{verbose}{If \code{verbose = TRUE}, print progress of DSC
query command to the console.}
}
\value{
A data frame containing the result of the DSC query, with
columns corresponding to the query target. When reasonable to do
so, the DSC outputs are extracted into the columns of the data
frame; when the values are not extracted, the file names containing
the outputs are provided instead.

Note that data frames cannot contain NULL values, and therefore
NULL-valued DSC outputs cannot be extracted into the data frame,
and must be loaded from the RDS files.

When targets are unassigned, these are stored as missing values
(\code{NA}) in the appropriate columns.
}
\description{
This is an R interface to \code{dsc-query} for
conveniently extracting and exploring DSC results within the R
environment. For details, see the documentation for the
\code{dsc-query} command.
}
\note{
We have made considerable effort to prevent column names from
being duplicated. However, we have not tested this extensively for
possible column name conflicts.

This function may not work in Windows.
}
\examples{

# Retrieve the number of samples ("n") and error summary ("error")
# from all simulations in the "one_sample_location" DSC experiment.
dsc.dir <- system.file("datafiles","one_sample_location",
                       "dsc_result",package = "dscrutils")
dat1 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error")

# Retrieve the results only for simulations in which the "mean"
# module was run. Because this condition is about a module name, it
# is applied before loading the full set of results into R, so the
# filtering step can speed up the query when there are many
# simulation results.
dat2 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
                conditions = "$(analyze) == 'mean'")

# Return results only for simulations in which the error summary is
# greater than 0.25. This condition is applied after loading the full
# set of results into R, and so this sort of condition will not
# reduce the query runtime.
dat3 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
               conditions = "$(score.error) > 0.25")

# Retrieve the DSC results only for simulations in which the "mean"
# module was run, and which which the error summary is greater than
# 0.25. The conditions in this case are applied before and after
# loading results into R.
dat4 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
                 conditions = c("$(score.error) > 0.25",
                               "$(analyze) == 'median'"))

# Retrieve some results from the "ash" DSC experiment. In this
# example, the beta estimates are long vectors (length 1,000), so the
# results are not extracted into the outputted data frame.
dsc.dir2 <- system.file("datafiles","ash","dsc_result",
                        package = "dscrutils")
dat5 <-
  dscquery(dsc.dir2,
           targets = c(paste("simulate",c("nsamp","g"),sep="."),
                       paste("shrink",c("mixcompdist","beta_est","pi0_est"),
                             sep=".")),
           conditions = "$(simulate.g)=='list(c(2/3,1/3),c(0,0),c(1,2))'")

# This is the same as the previous example, but extracts the
# vector-valued beta estimates into the outputted data frame. As a
# result, the data frame of query results is much larger (it has over
# 1000 columns).
dat6 <-
  dscquery(dsc.dir2,
           targets = c("simulate.nsamp","simulate.g","shrink.mixcompdist",
                       "shrink.beta_est","shrink.pi0_est"),
           conditions = "$(simulate.g)=='list(c(2/3,1/3),c(0,0),c(1,2))'",
           max.extract.vector = 1000)

\dontrun{

# This query should generate an error because there is no output
# called "mse" in the "score" module.
dat7 <- dscquery(dsc.dir,targets = c("simulate.n","analyze","score.mse"),
                 conditions = "$(simulate.n) > 10")

}

}
