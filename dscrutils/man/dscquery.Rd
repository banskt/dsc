% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dscquery.R
\name{dscquery}
\alias{dscquery}
\title{R interface for querying DSC output.}
\usage{
dscquery(dsc.outdir, targets, targets.notreq = NULL, conditions = NULL,
  groups = NULL, add.path = FALSE, ignore.missing.file = FALSE,
  omit.file.columns = FALSE, exec = "dsc-query",
  return.type = c("data.frame", "list"), verbose = TRUE)
}
\arguments{
\item{dsc.outdir}{Directory where the DSC output is stored.}

\item{targets}{\emph{TO DO: Revise this description after deciding
what this input argument is for.} Query targets specified as a
character string separated by spaces, or a character vector, e.g.,
\code{targets = "simulate.n analyze score.error"} and \code{targets
= c("simulate.n","analyze","score.error")} are equivalent. DSC
pipelines (i.e., rows of the returned data frame) in which any of
the targets are missing (\code{NA}) will be automatically removed
from the data frame; to allow for missing values in the output
columns (or list elements), use argument \code{targets.notreq}
instead. This input argument specifies the \code{--target} flag in
the \code{dsc-query} call. Note that, to easily specify multiple
targets from the same module, we recommend using
\code{\link{paste}}; e.g., \code{paste("simulate",
c("n","p","df"),sep = ".")}. These targets will be the names of the
columns in the data frame if a data frame is returned, or the names
of the list elements if a list is returned.}

\item{targets.notreq}{\emph{TO DO: Revise this description after
deciding what this input argument is for.} Non-required query
targets; this is the same as \code{targets}, except that missing
values are allowed.}

\item{conditions}{Conditions used to filter DSC pipeline
results. When \code{conditions = NULL}, no additional filtering of
DSC pipelines is performed. Although results can always be filtered
\emph{post hoc}, using \code{conditions} to filter can
significantly speed up queries when the DSC outputs are very large,
as this will filter results, whenever possible, \emph{before} they
are loaded into R. Query conditions are specified as R expressions,
in which target names are written as \code{$(...)}; for example, to
request only results in which the value of parameter \code{sigma}
in module \code{simulate} is greater than or equal to \code{0.1},
set \code{conditions = "$(simulate.sigma) >= 0.1)"} (see below for
additional examples). This input argument specifies the
\code{--condition} flag in the call to \code{dsc-query}.}

\item{groups}{Define module groups. This argument specifies the
\code{--groups} flag in the call to \code{dsc-query}. For example,
\code{groups = c("method: mean median", "score: abs_err sqrt_err")}
will define two module groups, \code{method} and \code{score}.}

\item{add.path}{If \code{add.path = TRUE}, all file names are given
as full pathnames; if \code{add.path = FALSE}, all file names are
given as relative paths.}

\item{ignore.missing.file}{If \code{ignore.missing.file = TRUE},
all DSC output files that are missing will have \code{NA} for the
file name, when extracting target outputs from files, any outputs
with missing files will have their value set to \code{NA}. If
\code{ignore.missing.file = FALSE}, \code{dscquery} will throw an
error whenever a missing file is encountered.}

\item{omit.file.columns}{If \code{omit.file.columns = TRUE}, all
columns or list elements specifying DSC output files (list elements
or column names ending in "output.file") will not be included in
the return value.}

\item{exec}{The command or pathname of the dsc-query executable.}

\item{return.type}{If \code{return.type = "list"}, the DSC outputs
are returned in a data frame. For columns containing more complex
outputs that cannot be stored in individual entries of a data frame
(e.g., matrices, \code{NULL}), the names of the files containing
the DSC outputs will be returned instead; individual outputs can
then be retrieved later using \code{\link{read_dsc}}.

Whether or not to only extract atomic values
(simple R data types) or extract all objects. When set to TRUE the
return will be an R data.frame. Otherwise a nested list will be
returned which can be converted to `tibble` and queried like a
data.frame (https://tibble.tidyverse.org).}

\item{verbose}{If \code{verbose = TRUE}, print progress of DSC
query command to the console.}
}
\value{
A list or data frame containing the result of the DSC
query, with columns corresponding to the query target. When
reasonable to do so, the DSC outputs are extracted into the columns
of the data frame; when the values are not extracted, the file
names containing the outputs are provided instead.

Note that data frames cannot contain NULL values, and therefore
NULL-valued DSC outputs cannot be extracted into the data frame,
and must be loaded from the RDS files.

When targets are unassigned, these are stored as missing values
(\code{NA}) in the appropriate columns.
}
\description{
This is an R interface to the \code{dsc-query} program
for conveniently extracting and exploring DSC results within the R
environment. For additional documentation, run
\code{system("dsc-query --help")}.
}
\note{
We have made considerable effort to prevent column names from
being duplicated. However, we have not tested this extensively for
possible column name conflicts.

This function may not work in Windows.
}
\examples{

# Retrieve the number of samples ("n") and error summary ("error")
# from all simulations in the "one_sample_location" DSC experiment.
dsc.dir <- system.file("datafiles","one_sample_location",
                       "dsc_result",package = "dscrutils")
dat1 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error")

# Retrieve the results only for simulations in which the "mean"
# module was run. Because this condition is about a module name, it
# is applied before loading the full set of results into R, so the
# filtering step can speed up the query when there are many
# simulation results.
dat2 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
                conditions = "$(analyze) == 'mean'")

# Return results only for simulations in which the error summary is
# greater than 0.25. This condition is applied after loading the full
# set of results into R, and so this sort of condition will not
# reduce the query runtime.
dat3 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
               conditions = "$(score.error) > 0.25")

# Retrieve the DSC results only for simulations in which the "mean"
# module was run, and which which the error summary is greater than
# 0.25. The conditions in this case are applied before and after
# loading results into R.
dat4 <- dscquery(dsc.dir,targets = "simulate.n analyze score.error",
                 conditions = c("$(score.error) > 0.25",
                               "$(analyze) == 'median'"))

# Retrieve some results from the "ash" DSC experiment. In this
# example, the beta estimates are long vectors (length 1,000), so the
# results are not extracted into the outputted data frame.
dsc.dir2 <- system.file("datafiles","ash","dsc_result",
                        package = "dscrutils")
dat5 <-
  dscquery(dsc.dir2,
           targets = c(paste("simulate",c("nsamp","g"),sep="."),
                       paste("shrink",c("mixcompdist","beta_est","pi0_est"),
                             sep=".")),
           conditions = "$(simulate.g)=='list(c(2/3,1/3),c(0,0),c(1,2))'")

# This is the same as the previous example, but extracts the
# vector-valued beta estimates into the outputted data frame. As a
# result, the data frame of query results is much larger (it has over
# 1000 columns).
dat6 <-
  dscquery(dsc.dir2,
           targets = c("simulate.nsamp","simulate.g","shrink.mixcompdist",
                       "shrink.beta_est","shrink.pi0_est"),
           conditions = "$(simulate.g)=='list(c(2/3,1/3),c(0,0),c(1,2))'",
           max.extract.vector = 1000)

\dontrun{

# This query should generate an error because there is no output
# called "mse" in the "score" module.
dat7 <- dscquery(dsc.dir,targets = c("simulate.n","analyze","score.mse"),
                 conditions = "$(simulate.n) > 10")

}

}
