% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dscquery.R
\name{dscquery}
\alias{dscquery}
\title{SQL-like interface for querying DSC output.}
\usage{
dscquery(dsc.outdir, targets, conditions = NULL, groups, add.path = FALSE,
  exec = "dsc-query", max.extract.vector = 10, verbose = TRUE)
}
\arguments{
\item{dsc.outdir}{Directory where DSC output is stored.}

\item{targets}{Query targets specified as a character vector, e.g.,
\code{targets = c("simulate.n","estimate","mse.score")}. These will
be the names of the columns in the returned data frame.}

\item{conditions}{The default \code{NULL} means "no conditions", in
which case the results for all DSC pipelines are returned.}

\item{groups}{Definition of module groups. This feature is not yet
implemented.}

\item{add.path}{If TRUE, the returned data frame will contain full
pathnames, not just the base filenames.}

\item{exec}{The command or pathname of the dsc-query executable.}

\item{max.extract.vector}{Vector-valued DSC outputs not exceeding
this length are automatically extracted to the data frame.}

\item{verbose}{If \code{verbose = TRUE}, print progress of DSC
query command to the console.}
}
\value{
A data frame containing the result of the DSC query, with
columns corresponding to the query target. When reasonable to do
so, the DSC outputs are extracted into the columns of the data
frame; when the values are not extracted, the file names containing
the outputs are provided instead.

Note that data frames cannot contain NULL values, and therefore
NULL-valued DSC outputs cannot be extracted into the data frame,
and must be loaded from the RDS files.
}
\description{
This is an R interface to \code{dsc-query} for
conveniently extracting and exploring DSC results within the R
environment. For details, see the documentation for the
\code{dsc-query} command.
}
\note{
We have made considerable effort to prevent column names from
being duplicated. However, we have not tested this extensively for
possible column name conflicts.

This function may not work in Windows.
}
\examples{

# Retrieve results from the "one_sample_location" DSC experiment in
# which the true mean is 1. The MSE (mean squared error) values
# should be extracted into the "mse.mse" column.
dsc.dir <- system.file("datafiles","one_sample_location",
                       "dsc_result",package = "dscrutils")
dat <- dscquery(dsc.dir,targets = c("simulate.n","estimate","mse.mse"),
                condition = "simulate.true_mean = 1")
print(dat)

# Retrieve some results from the "ash" DSC experiment. In this
# example, the beta estimates are long vectors (length 1,000), so the
# results are not extracted into the outputted data frame.
dsc.dir2 <- system.file("datafiles","ash","dsc_result",
                        package = "dscrutils")
dat2 <-
  dscquery(dsc.dir2,
           targets = c("simulate.nsamp","simulate.g","shrink.mixcompdist",
                       "shrink.beta_est","shrink.pi0_est"),
           condition = paste("simulate.g =",
                             "'ashr::normalmix(c(2/3,1/3),c(0,0),c(1,2))'"))

# This is the same as the previous example, but extracts the
# vector-valued beta estimates into the outputted data frame. As a
# result, the data frame of query results is much larger (it has over
# 1000 columns).

dat3 <-
  dscquery(dsc.dir2,
           targets = c("simulate.nsamp","simulate.g","shrink.mixcompdist",
                       "shrink.beta_est","shrink.pi0_est"),
           condition = paste("simulate.g =",
                             "'ashr::normalmix(c(2/3,1/3),c(0,0),c(1,2))'"),
           max.extract.vector = 1000)

# This query should generate an error because there is no output
# called "score" in the "mse" module.
dat4 <- dscquery(dsc.dir,targets = c("simulate.n","estimate","mse.score"),
                 condition = "simulate.true_mean = 1")

}
