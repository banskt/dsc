% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dscreval.R
\name{dscreval}
\alias{dscreval}
\title{Evaluate R expression and create tuple-like string
  encoding of value to be used in DSC.}
\usage{
dscreval(x, envir = globalenv(), init.env = quote(set.seed(0)))
}
\arguments{
\item{x}{Text of R expression to be parsed by code{parse}.}

\item{envir}{Environment in which the expression is evaluated. By
default, the expression is evaluated in the global R environment.}

\item{init.env}{R expression evaluated to initialize the
environment chosen by argument `envir`.}
}
\value{
The return value is a string representation the atomic
  vector, or list of atomic vectors, in a format similar to nested
  tuples in Python.
}
\description{
Parse and evaluate R expression, and check that the
  value is a "simple" atomic object, or a list of simple atomic
  objects, then return a string representation of the object.
}
\details{
The expression must evaluate to a logical, character or
  non-complex numeric vector, or a list of vectors of this form. An
  error is produced if the expression evaluates to an object that is
  not of this form.
}
\examples{

# Generates a string encoding a tuple of numeric values.
x1 <- dscreval("c(3,-1,14)")
cat(x1,"\n")

# Generates a string encoding a tuple of numeric values.
x2 <- dscreval("seq(1,2,length.out = 5)")
cat(x2,"\n")

# Generates a string encoding a tuple of logical values.
x3 <- dscreval("1:7 < 5")
cat(x3,"\n")

# Generates a string encoding a tuple of character values.
x4 <- dscreval("c('Illinois','Michigan','Ohio')")
cat(x4,"\n")

# Generates a string encoding of a nested tuple, in which the first
# element contains character values, and the second element contains
# numeric values.
x5 <- dscreval("list(x = LETTERS[1:5],y = 1:5)")
cat(x5,"\n")

\dontrun{

# Produces an error because NULL is not allowed.
dscreval("NULL")

# Produces an error because complex numbers are not allowed.
dscreval("polyroot(c(-1,2,-1,4))")

# Produces an error because NULL values are not allowed anywhere in
# the data structure.
dscreval("vector('list',3)")

# Produces an error because lists containing lists are not allowed.
dscreval("list(x = LETTERS[1:5],y = 1:5,z = as.list(1:5))")
}

}
